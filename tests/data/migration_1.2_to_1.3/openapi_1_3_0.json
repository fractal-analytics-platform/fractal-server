{"openapi": "3.0.2", "info": {"title": "FastAPI", "version": "0.1.0"}, "paths": {"/api/alive/": {"get": {"summary": "Alive", "operationId": "alive_api_alive__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/v1/project/": {"get": {"tags": ["project"], "summary": "Get List Project", "description": "Return list of projects user is member of", "operationId": "get_list_project_api_v1_project__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get List Project Api V1 Project  Get", "type": "array", "items": {"$ref": "#/components/schemas/ProjectRead"}}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["project"], "summary": "Create Project", "description": "Create new poject", "operationId": "create_project_api_v1_project__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/workflow/{workflow_id}/apply/": {"post": {"tags": ["project"], "summary": "Apply Workflow", "operationId": "apply_workflow_api_v1_project__project_id__workflow__workflow_id__apply__post", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Id", "type": "integer"}, "name": "workflow_id", "in": "path"}, {"required": true, "schema": {"title": "Input Dataset Id", "type": "integer"}, "name": "input_dataset_id", "in": "query"}, {"required": false, "schema": {"title": "Output Dataset Id", "type": "integer"}, "name": "output_dataset_id", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApplyWorkflowCreate"}}}, "required": true}, "responses": {"202": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApplyWorkflowRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}": {"get": {"tags": ["project"], "summary": "Get Project", "description": "Return info on an existing project", "operationId": "get_project_api_v1_project__project_id__get", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["project"], "summary": "Delete Project", "description": "Delete project", "operationId": "delete_project_api_v1_project__project_id__delete", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["project"], "summary": "Edit Project", "operationId": "edit_project_api_v1_project__project_id__patch", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/dataset/": {"post": {"tags": ["project"], "summary": "Add Dataset", "description": "Add new dataset to current project", "operationId": "add_dataset_api_v1_project__project_id__dataset__post", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DatasetCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DatasetRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/workflow/": {"get": {"tags": ["project"], "summary": "Get Workflow List", "description": "Get list of workflows associated to the current project", "operationId": "get_workflow_list_api_v1_project__project_id__workflow__get", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Workflow List Api V1 Project  Project Id  Workflow  Get", "type": "array", "items": {"$ref": "#/components/schemas/WorkflowRead"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["workflow"], "summary": "Create Workflow", "description": "Create a workflow, associate to a project", "operationId": "create_workflow_api_v1_project__project_id__workflow__post", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/job/": {"get": {"tags": ["project"], "summary": "Get Job List", "description": "Get list of jobs associated to the current project", "operationId": "get_job_list_api_v1_project__project_id__job__get", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Job List Api V1 Project  Project Id  Job  Get", "type": "array", "items": {"$ref": "#/components/schemas/ApplyWorkflowRead"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/dataset/{dataset_id}": {"get": {"tags": ["project"], "summary": "Get Dataset", "description": "Get info on a dataset associated to the current project", "operationId": "get_dataset_api_v1_project__project_id__dataset__dataset_id__get", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Dataset Id", "type": "integer"}, "name": "dataset_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DatasetRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["project"], "summary": "Delete Dataset", "description": "Delete a dataset associated to the current project", "operationId": "delete_dataset_api_v1_project__project_id__dataset__dataset_id__delete", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Dataset Id", "type": "integer"}, "name": "dataset_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["project"], "summary": "Patch Dataset", "description": "Edit a dataset associated to the current project", "operationId": "patch_dataset_api_v1_project__project_id__dataset__dataset_id__patch", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Dataset Id", "type": "integer"}, "name": "dataset_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DatasetUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DatasetRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/dataset/{dataset_id}/resource/": {"get": {"tags": ["project"], "summary": "Get Resource", "description": "Get resources from a dataset", "operationId": "get_resource_api_v1_project__project_id__dataset__dataset_id__resource__get", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Dataset Id", "type": "integer"}, "name": "dataset_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Resource Api V1 Project  Project Id  Dataset  Dataset Id  Resource  Get", "type": "array", "items": {"$ref": "#/components/schemas/ResourceRead"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["project"], "summary": "Add Resource", "description": "Add resource to an existing dataset", "operationId": "add_resource_api_v1_project__project_id__dataset__dataset_id__resource__post", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Dataset Id", "type": "integer"}, "name": "dataset_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResourceCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResourceRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/dataset/{dataset_id}/resource/{resource_id}": {"delete": {"tags": ["project"], "summary": "Delete Resource", "description": "Delete a resource of a dataset", "operationId": "delete_resource_api_v1_project__project_id__dataset__dataset_id__resource__resource_id__delete", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Dataset Id", "type": "integer"}, "name": "dataset_id", "in": "path"}, {"required": true, "schema": {"title": "Resource Id", "type": "integer"}, "name": "resource_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["project"], "summary": "Edit Resource", "description": "Edit a resource of a dataset", "operationId": "edit_resource_api_v1_project__project_id__dataset__dataset_id__resource__resource_id__patch", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Dataset Id", "type": "integer"}, "name": "dataset_id", "in": "path"}, {"required": true, "schema": {"title": "Resource Id", "type": "integer"}, "name": "resource_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResourceUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResourceRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/workflow/import/": {"post": {"tags": ["project"], "summary": "Import Workflow Into Project", "description": "Import an existing workflow into a project\n\nAlso create all required objects (i.e. Workflow and WorkflowTask's) along\nthe way.", "operationId": "import_workflow_into_project_api_v1_project__project_id__workflow_import__post", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowImport"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/task/collect/pip/": {"post": {"tags": ["task"], "summary": "Collect Tasks Pip", "description": "Task collection endpoint\n\nTrigger the creation of a dedicated virtual environment, the installation\nof a package and the collection of tasks as advertised in the manifest.", "operationId": "collect_tasks_pip_api_v1_task_collect_pip__post", "parameters": [{"required": false, "schema": {"title": "Public", "type": "boolean", "default": true}, "name": "public", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskCollectPip"}}}, "required": true}, "responses": {"200": {"description": "Package already collected. Returning info on already available tasks", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StateRead"}}}}, "201": {"description": "Task collection successfully started in the background"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/task/collect/{state_id}": {"get": {"tags": ["task"], "summary": "Check Collection Status", "description": "Check status of background task collection", "operationId": "check_collection_status_api_v1_task_collect__state_id__get", "parameters": [{"required": true, "schema": {"title": "State Id", "type": "integer"}, "name": "state_id", "in": "path"}, {"required": false, "schema": {"title": "Verbose", "type": "boolean", "default": false}, "name": "verbose", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StateRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/task/": {"get": {"tags": ["task"], "summary": "Get List Task", "description": "Get list of available tasks", "operationId": "get_list_task_api_v1_task__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get List Task Api V1 Task  Get", "type": "array", "items": {"$ref": "#/components/schemas/TaskRead"}}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["task"], "summary": "Create Task", "description": "Create a new task", "operationId": "create_task_api_v1_task__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/task/{task_id}": {"get": {"tags": ["task"], "summary": "Get Task", "description": "Get info on a specific task", "operationId": "get_task_api_v1_task__task_id__get", "parameters": [{"required": true, "schema": {"title": "Task Id", "type": "integer"}, "name": "task_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["task"], "summary": "Patch Task", "description": "Edit a specific task", "operationId": "patch_task_api_v1_task__task_id__patch", "parameters": [{"required": true, "schema": {"title": "Task Id", "type": "integer"}, "name": "task_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/workflow/{workflow_id}": {"get": {"tags": ["workflow"], "summary": "Get Workflow", "description": "Get info on an existing workflow", "operationId": "get_workflow_api_v1_project__project_id__workflow__workflow_id__get", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Id", "type": "integer"}, "name": "workflow_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["workflow"], "summary": "Delete Workflow", "description": "Delte a workflow", "operationId": "delete_workflow_api_v1_project__project_id__workflow__workflow_id__delete", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Id", "type": "integer"}, "name": "workflow_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["workflow"], "summary": "Patch Workflow", "description": "Edit a workflow", "operationId": "patch_workflow_api_v1_project__project_id__workflow__workflow_id__patch", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Id", "type": "integer"}, "name": "workflow_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/workflow/{workflow_id}/wftask/": {"post": {"tags": ["workflow"], "summary": "Add Task To Workflow", "description": "Add a WorkflowTask to a Workflow", "operationId": "add_task_to_workflow_api_v1_project__project_id__workflow__workflow_id__wftask__post", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Id", "type": "integer"}, "name": "workflow_id", "in": "path"}, {"required": true, "schema": {"title": "Task Id", "type": "integer"}, "name": "task_id", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowTaskCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowTaskRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/workflow/{workflow_id}/wftask/{workflow_task_id}": {"delete": {"tags": ["workflow"], "summary": "Delete Task From Workflow", "description": "Delete a WorkflowTask of a Workflow", "operationId": "delete_task_from_workflow_api_v1_project__project_id__workflow__workflow_id__wftask__workflow_task_id__delete", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Id", "type": "integer"}, "name": "workflow_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Task Id", "type": "integer"}, "name": "workflow_task_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["workflow"], "summary": "Patch Workflow Task", "description": "Edit a WorkflowTask of a Workflow", "operationId": "patch_workflow_task_api_v1_project__project_id__workflow__workflow_id__wftask__workflow_task_id__patch", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Id", "type": "integer"}, "name": "workflow_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Task Id", "type": "integer"}, "name": "workflow_task_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowTaskUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowTaskRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/project/{project_id}/workflow/{workflow_id}/export/": {"get": {"tags": ["workflow"], "summary": "Export Worfklow", "description": "Export an existing workflow, after stripping all IDs", "operationId": "export_worfklow_api_v1_project__project_id__workflow__workflow_id__export__get", "parameters": [{"required": true, "schema": {"title": "Project Id", "type": "integer"}, "name": "project_id", "in": "path"}, {"required": true, "schema": {"title": "Workflow Id", "type": "integer"}, "name": "workflow_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowExport"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/job/{job_id}": {"get": {"tags": ["monitoring"], "summary": "Get Job", "description": "Return info on an existing job", "operationId": "get_job_api_v1_job__job_id__get", "parameters": [{"required": true, "schema": {"title": "Job Id", "type": "integer"}, "name": "job_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApplyWorkflowRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/api/v1/job/{job_id}/download/": {"get": {"tags": ["monitoring"], "summary": "Download Job Logs", "description": "Download job folder", "operationId": "download_job_logs_api_v1_job__job_id__download__get", "parameters": [{"required": true, "schema": {"title": "Job Id", "type": "integer"}, "name": "job_id", "in": "path"}], "responses": {"200": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/token/login": {"post": {"tags": ["auth"], "summary": "Auth:Bearer-Jwt.Login", "operationId": "auth_bearer_jwt_login_auth_token_login_post", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_auth_bearer_jwt_login_auth_token_login_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BearerResponse"}, "example": {"access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI", "token_type": "bearer"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"LOGIN_BAD_CREDENTIALS": {"summary": "Bad credentials or the user is inactive.", "value": {"detail": "LOGIN_BAD_CREDENTIALS"}}, "LOGIN_USER_NOT_VERIFIED": {"summary": "The user is not verified.", "value": {"detail": "LOGIN_USER_NOT_VERIFIED"}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/auth/token/logout": {"post": {"tags": ["auth"], "summary": "Auth:Bearer-Jwt.Logout", "operationId": "auth_bearer_jwt_logout_auth_token_logout_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "401": {"description": "Missing token or inactive user."}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/login": {"post": {"tags": ["auth"], "summary": "Auth:Cookie-Jwt.Login", "operationId": "auth_cookie_jwt_login_auth_login_post", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_auth_cookie_jwt_login_auth_login_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"LOGIN_BAD_CREDENTIALS": {"summary": "Bad credentials or the user is inactive.", "value": {"detail": "LOGIN_BAD_CREDENTIALS"}}, "LOGIN_USER_NOT_VERIFIED": {"summary": "The user is not verified.", "value": {"detail": "LOGIN_USER_NOT_VERIFIED"}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/auth/logout": {"post": {"tags": ["auth"], "summary": "Auth:Cookie-Jwt.Logout", "operationId": "auth_cookie_jwt_logout_auth_logout_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "401": {"description": "Missing token or inactive user."}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/register": {"post": {"tags": ["auth"], "summary": "Register:Register", "operationId": "register_register_auth_register_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRead"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"REGISTER_USER_ALREADY_EXISTS": {"summary": "A user with this email already exists.", "value": {"detail": "REGISTER_USER_ALREADY_EXISTS"}}, "REGISTER_INVALID_PASSWORD": {"summary": "Password validation failed.", "value": {"detail": {"code": "REGISTER_INVALID_PASSWORD", "reason": "Password should beat least 3 characters"}}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/forgot-password": {"post": {"tags": ["auth"], "summary": "Reset:Forgot Password", "operationId": "reset_forgot_password_auth_forgot_password_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_reset_forgot_password_auth_forgot_password_post"}}}, "required": true}, "responses": {"202": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/auth/reset-password": {"post": {"tags": ["auth"], "summary": "Reset:Reset Password", "operationId": "reset_reset_password_auth_reset_password_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_reset_reset_password_auth_reset_password_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"RESET_PASSWORD_BAD_TOKEN": {"summary": "Bad or expired token.", "value": {"detail": "RESET_PASSWORD_BAD_TOKEN"}}, "RESET_PASSWORD_INVALID_PASSWORD": {"summary": "Password validation failed.", "value": {"detail": {"code": "RESET_PASSWORD_INVALID_PASSWORD", "reason": "Password should be at least 3 characters"}}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/auth/request-verify-token": {"post": {"tags": ["auth"], "summary": "Verify:Request-Token", "operationId": "verify_request_token_auth_request_verify_token_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_verify_request_token_auth_request_verify_token_post"}}}, "required": true}, "responses": {"202": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/auth/verify": {"post": {"tags": ["auth"], "summary": "Verify:Verify", "operationId": "verify_verify_auth_verify_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_verify_verify_auth_verify_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRead"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"VERIFY_USER_BAD_TOKEN": {"summary": "Bad token, not existing user ornot the e-mail currently set for the user.", "value": {"detail": "VERIFY_USER_BAD_TOKEN"}}, "VERIFY_USER_ALREADY_VERIFIED": {"summary": "The user is already verified.", "value": {"detail": "VERIFY_USER_ALREADY_VERIFIED"}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/auth/users/me": {"get": {"tags": ["auth"], "summary": "Users:Current User", "operationId": "users_current_user_auth_users_me_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRead"}}}}, "401": {"description": "Missing token or inactive user."}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["auth"], "summary": "Users:Patch Current User", "operationId": "users_patch_current_user_auth_users_me_patch", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRead"}}}}, "401": {"description": "Missing token or inactive user."}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"UPDATE_USER_EMAIL_ALREADY_EXISTS": {"summary": "A user with this email already exists.", "value": {"detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"}}, "UPDATE_USER_INVALID_PASSWORD": {"summary": "Password validation failed.", "value": {"detail": {"code": "UPDATE_USER_INVALID_PASSWORD", "reason": "Password should beat least 3 characters"}}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/users/{id}": {"get": {"tags": ["auth"], "summary": "Users:User", "operationId": "users_user_auth_users__id__get", "parameters": [{"required": true, "schema": {"title": "Id"}, "name": "id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRead"}}}}, "401": {"description": "Missing token or inactive user."}, "403": {"description": "Not a superuser."}, "404": {"description": "The user does not exist."}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["auth"], "summary": "Users:Delete User", "operationId": "users_delete_user_auth_users__id__delete", "parameters": [{"required": true, "schema": {"title": "Id"}, "name": "id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Missing token or inactive user."}, "403": {"description": "Not a superuser."}, "404": {"description": "The user does not exist."}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["auth"], "summary": "Users:Patch User", "operationId": "users_patch_user_auth_users__id__patch", "parameters": [{"required": true, "schema": {"title": "Id"}, "name": "id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRead"}}}}, "401": {"description": "Missing token or inactive user."}, "403": {"description": "Not a superuser."}, "404": {"description": "The user does not exist."}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorModel"}, "examples": {"UPDATE_USER_EMAIL_ALREADY_EXISTS": {"summary": "A user with this email already exists.", "value": {"detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"}}, "UPDATE_USER_INVALID_PASSWORD": {"summary": "Password validation failed.", "value": {"detail": {"code": "UPDATE_USER_INVALID_PASSWORD", "reason": "Password should beat least 3 characters"}}}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/whoami": {"get": {"tags": ["auth"], "summary": "Whoami", "description": "Return current user", "operationId": "whoami_auth_whoami_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRead"}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/userlist": {"get": {"tags": ["auth"], "summary": "List Users", "description": "Return list of all users", "operationId": "list_users_auth_userlist_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Users Auth Userlist Get", "type": "array", "items": {"$ref": "#/components/schemas/UserRead"}}}}}}, "security": [{"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}}, "components": {"schemas": {"ApplyWorkflowCreate": {"title": "ApplyWorkflowCreate", "required": ["project_id", "input_dataset_id", "workflow_id"], "type": "object", "properties": {"project_id": {"title": "Project Id", "type": "integer"}, "input_dataset_id": {"title": "Input Dataset Id", "type": "integer"}, "output_dataset_id": {"title": "Output Dataset Id", "type": "integer"}, "workflow_id": {"title": "Workflow Id", "type": "integer"}, "overwrite_input": {"title": "Overwrite Input", "type": "boolean", "default": false}, "worker_init": {"title": "Worker Init", "type": "string"}}, "description": "Base class for ApplyWorkflow\n\nAttributes:\n    input_dataset_id: TBD\n    output_dataset_id: TBD\n    workflow_id: TBD\n    overwrite_input: TBD\n    worker_init: TBD\n    working_dir: TBD\n    working_dir_user: TBD"}, "ApplyWorkflowRead": {"title": "ApplyWorkflowRead", "required": ["project_id", "input_dataset_id", "workflow_id", "id", "start_timestamp", "status"], "type": "object", "properties": {"project_id": {"title": "Project Id", "type": "integer"}, "input_dataset_id": {"title": "Input Dataset Id", "type": "integer"}, "output_dataset_id": {"title": "Output Dataset Id", "type": "integer"}, "workflow_id": {"title": "Workflow Id", "type": "integer"}, "overwrite_input": {"title": "Overwrite Input", "type": "boolean", "default": false}, "worker_init": {"title": "Worker Init", "type": "string"}, "id": {"title": "Id", "type": "integer"}, "start_timestamp": {"title": "Start Timestamp", "type": "string", "format": "date-time"}, "status": {"title": "Status", "type": "string"}, "log": {"title": "Log", "type": "string"}, "history": {"title": "History", "type": "array", "items": {"type": "string"}}, "working_dir": {"title": "Working Dir", "type": "string"}, "working_dir_user": {"title": "Working Dir User", "type": "string"}}, "description": "Base class for ApplyWorkflow\n\nAttributes:\n    input_dataset_id: TBD\n    output_dataset_id: TBD\n    workflow_id: TBD\n    overwrite_input: TBD\n    worker_init: TBD\n    working_dir: TBD\n    working_dir_user: TBD"}, "BearerResponse": {"title": "BearerResponse", "required": ["access_token", "token_type"], "type": "object", "properties": {"access_token": {"title": "Access Token", "type": "string"}, "token_type": {"title": "Token Type", "type": "string"}}}, "Body_auth_bearer_jwt_login_auth_token_login_post": {"title": "Body_auth_bearer_jwt_login_auth_token_login_post", "required": ["username", "password"], "type": "object", "properties": {"grant_type": {"title": "Grant Type", "pattern": "password", "type": "string"}, "username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}, "scope": {"title": "Scope", "type": "string", "default": ""}, "client_id": {"title": "Client Id", "type": "string"}, "client_secret": {"title": "Client Secret", "type": "string"}}}, "Body_auth_cookie_jwt_login_auth_login_post": {"title": "Body_auth_cookie_jwt_login_auth_login_post", "required": ["username", "password"], "type": "object", "properties": {"grant_type": {"title": "Grant Type", "pattern": "password", "type": "string"}, "username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}, "scope": {"title": "Scope", "type": "string", "default": ""}, "client_id": {"title": "Client Id", "type": "string"}, "client_secret": {"title": "Client Secret", "type": "string"}}}, "Body_reset_forgot_password_auth_forgot_password_post": {"title": "Body_reset_forgot_password_auth_forgot_password_post", "required": ["email"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email"}}}, "Body_reset_reset_password_auth_reset_password_post": {"title": "Body_reset_reset_password_auth_reset_password_post", "required": ["token", "password"], "type": "object", "properties": {"token": {"title": "Token", "type": "string"}, "password": {"title": "Password", "type": "string"}}}, "Body_verify_request_token_auth_request_verify_token_post": {"title": "Body_verify_request_token_auth_request_verify_token_post", "required": ["email"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email"}}}, "Body_verify_verify_auth_verify_post": {"title": "Body_verify_verify_auth_verify_post", "required": ["token"], "type": "object", "properties": {"token": {"title": "Token", "type": "string"}}}, "DatasetCreate": {"title": "DatasetCreate", "required": ["name"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "type": {"title": "Type", "type": "string"}, "meta": {"title": "Meta", "type": "object", "default": {}}, "read_only": {"title": "Read Only", "type": "boolean", "default": false}}, "description": "Base class for Dataset\n\nAttributes:\n    name: TBD\n    type: TBD\n    meta: TBD\n    read_only: TBD"}, "DatasetRead": {"title": "DatasetRead", "required": ["name", "read_only", "id", "resource_list", "project_id"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "type": {"title": "Type", "type": "string"}, "meta": {"title": "Meta", "type": "object", "default": {}}, "read_only": {"title": "Read Only", "type": "boolean"}, "id": {"title": "Id", "type": "integer"}, "resource_list": {"title": "Resource List", "type": "array", "items": {"$ref": "#/components/schemas/ResourceRead"}}, "project_id": {"title": "Project Id", "type": "integer"}}, "description": "Base class for Dataset\n\nAttributes:\n    name: TBD\n    type: TBD\n    meta: TBD\n    read_only: TBD"}, "DatasetUpdate": {"title": "DatasetUpdate", "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "type": {"title": "Type", "type": "string"}, "meta": {"title": "Meta", "type": "object"}, "read_only": {"title": "Read Only", "type": "boolean"}}, "description": "Base class for Dataset\n\nAttributes:\n    name: TBD\n    type: TBD\n    meta: TBD\n    read_only: TBD"}, "ErrorModel": {"title": "ErrorModel", "required": ["detail"], "type": "object", "properties": {"detail": {"title": "Detail", "anyOf": [{"type": "string"}, {"type": "object", "additionalProperties": {"type": "string"}}]}}}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "ProjectCreate": {"title": "ProjectCreate", "required": ["name"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "read_only": {"title": "Read Only", "type": "boolean", "default": false}, "default_dataset_name": {"title": "Default Dataset Name", "type": "string", "default": "default"}}, "description": "Base class for Project\n\nAttributes:\n    name: TBD\n    read_only: TBD"}, "ProjectRead": {"title": "ProjectRead", "required": ["name", "id"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "read_only": {"title": "Read Only", "type": "boolean", "default": false}, "id": {"title": "Id", "type": "integer"}, "dataset_list": {"title": "Dataset List", "type": "array", "items": {"$ref": "#/components/schemas/DatasetRead"}, "default": []}}, "description": "Base class for Project\n\nAttributes:\n    name: TBD\n    read_only: TBD"}, "ProjectUpdate": {"title": "ProjectUpdate", "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "read_only": {"title": "Read Only", "type": "boolean"}}, "description": "Base class for Project\n\nAttributes:\n    name: TBD\n    read_only: TBD"}, "ResourceCreate": {"title": "ResourceCreate", "required": ["path"], "type": "object", "properties": {"path": {"title": "Path", "type": "string"}}, "description": "Base class for Resource"}, "ResourceRead": {"title": "ResourceRead", "required": ["path", "id", "dataset_id"], "type": "object", "properties": {"path": {"title": "Path", "type": "string"}, "id": {"title": "Id", "type": "integer"}, "dataset_id": {"title": "Dataset Id", "type": "integer"}}, "description": "Base class for Resource"}, "ResourceUpdate": {"title": "ResourceUpdate", "required": ["path"], "type": "object", "properties": {"path": {"title": "Path", "type": "string"}}, "description": "Base class for Resource"}, "StateRead": {"title": "StateRead", "required": ["data", "timestamp"], "type": "object", "properties": {"data": {"title": "Data", "type": "object"}, "timestamp": {"title": "Timestamp", "type": "string", "format": "date-time"}, "id": {"title": "Id", "type": "integer"}}, "description": "Base class for `State`\n\nAttributes:\n    id: Primary key\n    data: Content of the state\n    timestamp: Time stamp of the state"}, "TaskCollectPip": {"title": "TaskCollectPip", "required": ["package"], "type": "object", "properties": {"package": {"title": "Package", "type": "string"}, "version": {"title": "Version", "type": "string"}, "python_version": {"title": "Python Version", "type": "string"}, "package_extras": {"title": "Package Extras", "type": "string"}}, "description": "TaskCollectPip class\n\nAttributes:\n    package: TBD\n    version: TBD\n    python_version: TBD\n    package_extras: TBD"}, "TaskCreate": {"title": "TaskCreate", "required": ["name", "source", "command", "input_type", "output_type"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "source": {"title": "Source", "type": "string"}, "command": {"title": "Command", "type": "string"}, "input_type": {"title": "Input Type", "type": "string"}, "output_type": {"title": "Output Type", "type": "string"}, "default_args": {"title": "Default Args", "type": "object", "default": {}}, "meta": {"title": "Meta", "type": "object", "default": {}}}, "description": "# TODO fix me\nTask base class\n\nA Task is the elemental unit of a workflow, and must be a self-standing\nexecutable.\n\nAttributes\n    name:\n        A human readable name for the task\n    command:\n        The command(s) that executes the task\n    source:\n        Path or url to task source. This is the information is used to\n        match tasks across fractal installations when a workflow is\n        imported.\n    input_type:\n        The type of data the task expects as input\n    output_type:\n        The type of data the task expects as output\n    default_args: Optional[Dict[str, Any]]\n        Dictionary (saved as JSON) of the default parameters of the task"}, "TaskExport": {"title": "TaskExport", "required": ["name", "source"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "source": {"title": "Source", "type": "string"}}, "description": "# TODO fix me\nTask base class\n\nA Task is the elemental unit of a workflow, and must be a self-standing\nexecutable.\n\nAttributes\n    name:\n        A human readable name for the task\n    command:\n        The command(s) that executes the task\n    source:\n        Path or url to task source. This is the information is used to\n        match tasks across fractal installations when a workflow is\n        imported.\n    input_type:\n        The type of data the task expects as input\n    output_type:\n        The type of data the task expects as output\n    default_args: Optional[Dict[str, Any]]\n        Dictionary (saved as JSON) of the default parameters of the task"}, "TaskImport": {"title": "TaskImport", "required": ["name", "source"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "source": {"title": "Source", "type": "string"}}, "description": "# TODO fix me\nTask base class\n\nA Task is the elemental unit of a workflow, and must be a self-standing\nexecutable.\n\nAttributes\n    name:\n        A human readable name for the task\n    command:\n        The command(s) that executes the task\n    source:\n        Path or url to task source. This is the information is used to\n        match tasks across fractal installations when a workflow is\n        imported.\n    input_type:\n        The type of data the task expects as input\n    output_type:\n        The type of data the task expects as output\n    default_args: Optional[Dict[str, Any]]\n        Dictionary (saved as JSON) of the default parameters of the task"}, "TaskRead": {"title": "TaskRead", "required": ["name", "source", "id", "command", "input_type", "output_type"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "source": {"title": "Source", "type": "string"}, "id": {"title": "Id", "type": "integer"}, "command": {"title": "Command", "type": "string"}, "input_type": {"title": "Input Type", "type": "string"}, "output_type": {"title": "Output Type", "type": "string"}, "default_args": {"title": "Default Args", "type": "object", "default": {}}, "meta": {"title": "Meta", "type": "object", "default": {}}}, "description": "# TODO fix me\nTask base class\n\nA Task is the elemental unit of a workflow, and must be a self-standing\nexecutable.\n\nAttributes\n    name:\n        A human readable name for the task\n    command:\n        The command(s) that executes the task\n    source:\n        Path or url to task source. This is the information is used to\n        match tasks across fractal installations when a workflow is\n        imported.\n    input_type:\n        The type of data the task expects as input\n    output_type:\n        The type of data the task expects as output\n    default_args: Optional[Dict[str, Any]]\n        Dictionary (saved as JSON) of the default parameters of the task"}, "TaskUpdate": {"title": "TaskUpdate", "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "source": {"title": "Source", "type": "string"}, "input_type": {"title": "Input Type", "type": "string"}, "output_type": {"title": "Output Type", "type": "string"}, "command": {"title": "Command", "type": "string"}, "default_args": {"title": "Default Args", "type": "object"}, "meta": {"title": "Meta", "type": "object"}}, "description": "# TODO fix me\nTask base class\n\nA Task is the elemental unit of a workflow, and must be a self-standing\nexecutable.\n\nAttributes\n    name:\n        A human readable name for the task\n    command:\n        The command(s) that executes the task\n    source:\n        Path or url to task source. This is the information is used to\n        match tasks across fractal installations when a workflow is\n        imported.\n    input_type:\n        The type of data the task expects as input\n    output_type:\n        The type of data the task expects as output\n    default_args: Optional[Dict[str, Any]]\n        Dictionary (saved as JSON) of the default parameters of the task"}, "UserCreate": {"title": "UserCreate", "required": ["email", "password"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email"}, "password": {"title": "Password", "type": "string"}, "is_active": {"title": "Is Active", "type": "boolean", "default": true}, "is_superuser": {"title": "Is Superuser", "type": "boolean", "default": false}, "is_verified": {"title": "Is Verified", "type": "boolean", "default": false}, "slurm_user": {"title": "Slurm User", "type": "string"}, "cache_dir": {"title": "Cache Dir", "type": "string"}}}, "UserRead": {"title": "UserRead", "required": ["email"], "type": "object", "properties": {"id": {"title": "Id"}, "email": {"title": "Email", "type": "string", "format": "email"}, "is_active": {"title": "Is Active", "type": "boolean", "default": true}, "is_superuser": {"title": "Is Superuser", "type": "boolean", "default": false}, "is_verified": {"title": "Is Verified", "type": "boolean", "default": false}, "slurm_user": {"title": "Slurm User", "type": "string"}, "cache_dir": {"title": "Cache Dir", "type": "string"}}, "description": "Base User model."}, "UserUpdate": {"title": "UserUpdate", "type": "object", "properties": {"password": {"title": "Password", "type": "string"}, "email": {"title": "Email", "type": "string", "format": "email"}, "is_active": {"title": "Is Active", "type": "boolean"}, "is_superuser": {"title": "Is Superuser", "type": "boolean"}, "is_verified": {"title": "Is Verified", "type": "boolean"}, "slurm_user": {"title": "Slurm User", "type": "string"}, "cache_dir": {"title": "Cache Dir", "type": "string"}}}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}, "WorkflowCreate": {"title": "WorkflowCreate", "required": ["name", "project_id"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "project_id": {"title": "Project Id", "type": "integer"}}}, "WorkflowExport": {"title": "WorkflowExport", "required": ["name", "task_list"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "task_list": {"title": "Task List", "type": "array", "items": {"$ref": "#/components/schemas/WorkflowTaskExport"}}}}, "WorkflowImport": {"title": "WorkflowImport", "required": ["name", "task_list"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "task_list": {"title": "Task List", "type": "array", "items": {"$ref": "#/components/schemas/WorkflowTaskImport"}}}}, "WorkflowRead": {"title": "WorkflowRead", "required": ["name", "id", "project_id", "task_list"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "id": {"title": "Id", "type": "integer"}, "project_id": {"title": "Project Id", "type": "integer"}, "task_list": {"title": "Task List", "type": "array", "items": {"$ref": "#/components/schemas/WorkflowTaskRead"}}}}, "WorkflowTaskCreate": {"title": "WorkflowTaskCreate", "required": ["task_id"], "type": "object", "properties": {"meta": {"title": "Meta", "type": "object"}, "args": {"title": "Args", "type": "object"}, "order": {"title": "Order", "type": "integer"}, "task_id": {"title": "Task Id", "type": "integer"}}}, "WorkflowTaskExport": {"title": "WorkflowTaskExport", "required": ["task"], "type": "object", "properties": {"meta": {"title": "Meta", "type": "object"}, "args": {"title": "Args", "type": "object"}, "task": {"$ref": "#/components/schemas/TaskExport"}}}, "WorkflowTaskImport": {"title": "WorkflowTaskImport", "required": ["task"], "type": "object", "properties": {"meta": {"title": "Meta", "type": "object"}, "args": {"title": "Args", "type": "object"}, "task": {"$ref": "#/components/schemas/TaskImport"}}}, "WorkflowTaskRead": {"title": "WorkflowTaskRead", "required": ["id", "workflow_id", "task_id", "task"], "type": "object", "properties": {"meta": {"title": "Meta", "type": "object"}, "args": {"title": "Args", "type": "object"}, "id": {"title": "Id", "type": "integer"}, "order": {"title": "Order", "type": "integer"}, "workflow_id": {"title": "Workflow Id", "type": "integer"}, "task_id": {"title": "Task Id", "type": "integer"}, "task": {"$ref": "#/components/schemas/TaskRead"}}}, "WorkflowTaskUpdate": {"title": "WorkflowTaskUpdate", "type": "object", "properties": {"meta": {"title": "Meta", "type": "object"}, "args": {"title": "Args", "type": "object"}}}, "WorkflowUpdate": {"title": "WorkflowUpdate", "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "reordered_workflowtask_ids": {"title": "Reordered Workflowtask Ids", "type": "array", "items": {"type": "integer"}}}}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "/auth/token/login"}}}, "APIKeyCookie": {"type": "apiKey", "in": "cookie", "name": "fastapiusersauth"}}}}
