name: ci

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  GIT_TRACE: 2

jobs:

  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: ubuntu-20.04
    timeout-minutes: 30

    strategy:
      matrix:
        python-version: ["3.8"] #, "3.9", "3.10"]


    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fractal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: "recursive"

      - name: Install poetry
        run: pipx install poetry==1.3.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Run pre-commit
        if: ${{ matrix.python-version == '3.10' }}
        uses: pre-commit/action@v3.0.0

      - name: Install dependencies
        run: poetry install --with dev --no-interaction --all-extras

      - name: Test with pytest
        run: poetry run coverage run -m pytest tests/test_alive.py

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: ".coverage*"

      - name: extract openapi schema
        env:
          DEPLOYMENT_TYPE: development
          JWT_SECRET_KEY: 1234
          DATA_DIR_ROOT: /tmp/fractal-server/
          FRACTAL_TASKS_DIR: /tmp/fractal-server/tasks/
          FRACTAL_RUNNER_WORKING_BASE_DIR: /tmp/fractal-server/artifacts/
        run: poetry run fractalctl openapi

      - name: Upload openapi schema
        uses: actions/upload-artifact@v3
        with:
          name: openapi-schema
          path: "openapi.json"


  coverage:
    name: Coverage
    runs-on: ubuntu-20.04
    needs: tests
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: "recursive"

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: python -m pip install --upgrade coverage[toml]

      - name: Download data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Convert .coverage in xml
        run : coverage xml --data-file /home/runner/work/fractal-server/fractal-server/.coverage

      - name: pytest-coverage-commentator
        uses: orgoro/coverage@v3
        with:
            coverageFile: coverage.xml
            token:  ${{ github.token }}
      # - name: Add coverage comment to Pull Requests
      #   id: coverage_comment
      #   uses: py-cov-action/python-coverage-comment-action@v3
      #   with:
      #     GITHUB_TOKEN: ${{ github.token }}
      #     MERGE_COVERAGE_FILES: true
      #     MINIMUM_GREEN: 90
      #     MINIMUM_ORANGE: 60


  docs:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    name: Deploy docs
    runs-on: ubuntu-latest
    needs: coverage

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: "recursive"

      - name: Download openapi schema
        uses: actions/download-artifact@v3
        with:
          name: openapi-schema
          path: "docs/"

      - name: Deploy docs
        uses: mhausenblas/mkdocs-deploy-gh-pages@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REQUIREMENTS: docs/doc-requirements.txt
