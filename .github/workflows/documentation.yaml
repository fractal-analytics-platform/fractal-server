name: docs

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:

  docs:
    name: "Deploy docs"
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    steps:

      - uses: actions/checkout@v5
        with:
          persist-credentials: false

      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: poetry

      - run: pipx install poetry==2.2.1

      - run: poetry install --with docs

      - name: extract openapi schema
        env:
          JWT_SECRET_KEY: fake
          POSTGRES_DB: fake
          OAUTH_OAUTH2EXAMPLE_CLIENT_ID: oidc_example_client_id
          OAUTH_OAUTH2EXAMPLE_CLIENT_SECRET: oicd_example_client_secret
          OAUTH_OAUTH2EXAMPLE_OIDC_CONFIGURATION_ENDPOINT: https://accounts.google.com/.well-known/openid-configuration
        run: poetry run fractalctl openapi -f docs/openapi.json

      - run: poetry run mkdocs gh-deploy --config-file mkdocs.yml --force --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  docs-build:
    name: "Test docs build"
    runs-on: ubuntu-24.04
    if: ${{ github.event_name != 'push' || github.ref != 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false

      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: poetry

      - run: pipx install poetry==2.2.1

      - run: poetry install --with docs

      - name: extract openapi schema
        env:
          JWT_SECRET_KEY: secret
          POSTGRES_DB: fake
          OAUTH_OAUTH2EXAMPLE_CLIENT_ID: oidc_example_client_id
          OAUTH_OAUTH2EXAMPLE_CLIENT_SECRET: oicd_example_client_secret
          OAUTH_OAUTH2EXAMPLE_OIDC_CONFIGURATION_ENDPOINT: https://accounts.google.com/.well-known/openid-configuration
        run: poetry run fractalctl openapi -f docs/openapi.json

      - run: poetry run mkdocs build --config-file mkdocs.yml
